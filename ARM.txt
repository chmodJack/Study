ARM核心有三种硬件扩展:
	高速缓存和紧耦合内存、内存管理和协处理器接口。

TCM紧耦合存储器:
	TCM is fast SRAM located close to the core and guarantees the clock cycles
	required to fetch instructions or data-critical for real-time algorithms 
	requiring deterministic behavior.

ARM协处理器:
	The coprocessor can also extend the instruction set by providing a specialized group of new instructions. 
	For example, there are a set of specialized instructions that can be added to the standard ARM instruction set to 
	process vector floating-point(VFP)operations.
	These new instructions are processed in the decode stage of the ARM pipeline. If the decode stage sees a coprocessor instruction, 
	then it offers it to the relevant coprocessor.But if the coprocessor is not present or doesn’t recognize the instruction, 
	then the ARM takes an undefined instruction exception, which allows you to emulate the behavior of the coprocessor in software.
	每个ARM处理器实现执行特定的指令集体系结构（ISA）
	虽然ISA修订版可能有多个处理器实现。
	ISA的发展是为了适应嵌入式市场的需求。ARM对此进行了仔细的管理，因此编写在早期架构修订上执行的代码
	也将在以后的体系结构修订中执行。在解释架构的演进之前，我们必须介绍ARM处理器的命名。
	命名法识别单个处理器并提供关于特征集的基本信息。

	协处理器可以连接到ARM处理器。协处理器扩展了处理过程。
	通过扩展指令集或通过提供配置寄存器来实现核心的特性。通过协处理器接口可以向ARM核心添加多个协处理器
	ARMV7提供了三条指令:
		Data Memory Barrier(DMB)
			数据存储器隔离。DMB 指令保证仅当所有在它前面的存储器访问操作都执行完毕后，
			才提交(commit)在它后面的存储器访问操作。
		Data Synchronization Barrier(DSB)
			数据同步隔离。比DMB 严格:仅当所有在它前面的存储器访问操作都执行完毕后,
			才执行在它后面的指令(亦即任何指令都要等待存储器访问操作
		Instruction Synchronization Barrier(ISB)
			指令同步隔离。最严格：它会清洗流水线，以保证所有它前面的指令都执行完毕之后，
			才执行它后面的指令
	ARMV6是通过cp15对这些进行相关操作的,ARMV7就不是了...
	内存屏障,根源是因为cpu访问内存会乱序,有代码逻辑的乱序和机器执行时的优化缓存乱序

cache:
	cache和内存之间是block传输的,且有读写缓存TLB
	cpu和cache之间是word,byte传输的
	cache一般有几种类型：
	pipt
	vivt
	vipt noalias
	vipt alias
	pipt vivt vipt 各种类型的缓存 p:physics v:virtual i:index t:tags
	pipt的cache可以不开mmu就能用，vivt，vipt的cache要开mmu才能用
	armv7 的dcache是vipt noalias的。icache是vipt alias的。
	为什么会有cache alias问题呢，为什么amv7 dcache又没有呢，这是armv7 硬件能够自动处理dcache alias问题。
	http://bbs.chinaunix.net/forum.php?mod=viewthread&tid=4144029&page=1
	Arm4, Arm5: VIVT
	Arm6, Arm7:  I-cache VIPT, Dcache VIPT or  PIPT.
	https://en.wikipedia.org/wiki/CPU_cache#Associativity
	https://www.cnblogs.com/hoys/archive/2012/10/19/2731421.html
	arm里面有内存一致性总线，AXI总线，还有RAM和ROM是什么鬼
	http://blog.csdn.net/fivedoumi/article/details/31765657
	内存一致性涉有到一系列的问题:
	1)多处理要系统更新cache时,一个处理器修改了cache的内容,第二个处理器将不能访问这个cache,直到这个cache的内容被写内存.
	在现代处理器中硬件已经做了精心的设计,确保这种事情不会发生,硬件负责保持cache在各个CPU之间一致.
	2)外围硬件设备可以通过DMA(Direct Memory Access)访问内存,而不让处理器知道,也不会利用cache,这样在内存和cache之间就会出现不同步的情况.
	管理DMA的操作是操作系统的工作,比如设备驱动程序,它将保证内存与cache的一致性.
	3)当在cache中的数据比内存中的数据老时,称为stale.如果软件初始化DMA,使设备和RAM之间传递数据,那么软件必须告诉CPU,cache中的条目必须失效.
	4)当在cache中的数据比内存中的数据新时,称为dirty.在设备驱动程序允许一个设备经DMA从内存读数据时,
	它必须确保所有的dirty条目写进内存.也叫做flushing或sync cache.
	http://blog.csdn.net/hnzziafyz/article/details/52201851

mmu:
	MMU比MPU更要全面和先进,MPU的保护机制更简单,MMU提供细粒度的控制,页表提供虚拟内存到物理内存的映射和访问权限,
	页表和MMU之间还有TLB缓存
	https://www.cnblogs.com/yangv/p/5368013.html
	The use of large pages can also improve performance by reducing the number of 
	translation lookaside buffer(TLB)misses(转换后备缓存)

Thumb 指令:
	为以 Thumb 状态运行的、基于 ARM 体系结构的处理器的操作进行编码的一个半字或两个半字。 Thumb 指令必须为半字对齐。
Thumb 状态:
	执行 Thumb 指令的处理器工作在 Thumb 状态。 当直接通过 BX、BLX 等指令完成时，
	处理器可切换到 ARM 状态（以识别 ARM 指令）。
Thumb-2 指令:
	Thumb-2 是 Thumb 指令集的一项主要增强功能，并且由 ARMv6T2 和 ARMv7M体系结构定义。 
	Thumb-2 提供了几乎与 ARM 指令集完全一样的功能。
	它兼有16 位和 32 位指令，并可检索与 ARM 类似的性能，但其代码密度与 Thumb 代码类似。
Thumb-2EE 指令:
	Thumb-2 执行环境 (Thumb-2EE) 由 ARMv7 体系结构定义。 Thumb-2EE 指令集基于 Thumb-2，前者进行了一些更改和添加，
	使得动态生成的代码具有更好的目标，也就是说，就在执行之前或在执行过程中即可在该设备上编译代码。
ThumbEE 状态:
	执行 Thumb-2EE 指令的处理器正在以 ThumbEE 状态运行。 在此状态下，该指令集几乎与 Thumb 指令集相同。 
	不过，有些指令已经修改了行为，有些原有的指令已不再提供，另外还新添了一些指令。
Thumb总结:
	在ARM体系结构中，ARM指令集中的指令是32位的指令，其执行效率非常高。
	对于存储系统数据总线为16位的应用系统，ARM体系提供了Thumb指令集。
	Thumb指令集是对ARM指令集的一个子集重新编码得到的，指令长度为16位。
	通常在处理器执行ARM程式时，称处理器处于ARM状态；当处理器执行Thumb程式时，称处理器处于Thumb状态。
	Thumb指令集并没有改动ARM体系地层的程式设计模型，只是在该模型上加上了一些限制条件。
	Thumb指令集中的数据处理指令的操作数仍然为32位，指令寻址地址也是32位的。
	通常，Thumb程式比ARM程式更加紧凑，而且对于内存为8位或16位的系统，使用Thumb程式效率更高。
	不过，在下面一些场合下，程式必须运行在ARM状态，这时就需要混合使用ARM和Thumb程式。
	强调速度的场合，应该使用ARM程式；
	有些功能只能由ARM程式完成。如：使用或禁止异常中断；
	当处理器进入异常中断处理程式时，程式状态转换到ARM状态，即在异常中断处理程式入口的一些指令是ARM指令，
	然后根据需要程式能转换到Thumb状态，在异常中断程式返回前，程式再转换到ARM状态。
	ARM处理器总是从ARM状态开始执行。因而，如果要在调试器中运行Thumb程式，必须为该Thumb程式添加一个ARM程式头，
	然后再转换到Thumb状态，执行Thumb程式。

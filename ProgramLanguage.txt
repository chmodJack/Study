编程语言:
	c++的模板元编程
	const_cast
	static_cast
	dynamic_cast
	reinterpreter_cast
	Ada语言
	Rust语言
	Prolog语言
	Shell语言
	C语言事件驱动
	c++11 variadic模板 用户定义文字(user-defined literal)
	man gcc

算法逻辑:
	Leetcode,CodeWar

工具使用:
	cscope插件使用

感想摘抄:
	不需要放弃，你只需再花一点时间学会Haskell（我大概也就用了半年入了门，所以你也不用慌张）
	然后从C++的模板元编程开始（你就会觉得简直就像在写Haskell），然后再学C++的其他部分。事半功倍！
	不过题主也不一定非要学C++维持生计，因为用Haskell的都是欧洲的高薪职位啊。

	命令式：西红柿炒鸡蛋 = 炒（西红柿，鸡蛋)
	这个时候无论你要不要，计算机已经把西红柿炒鸡蛋已经做好了。即使你不想吃了也不能退单了，菜都已经给你端上来了，
	不想吃自己扔掉好了，反正钱（CPU，内存）是要花掉的。至于那个等号，只是为了方便在你想吃的时候可以拿这个内存地址取到这盘菜而已。
	函数式:西红柿炒鸡蛋 = 炒 西红柿 鸡蛋
	这个时候你只是下了个定义，相当于把菜谱念给计算机听，告诉它西红柿炒鸡蛋这道菜，是西红柿和鸡蛋炒在一起的结果，
	计算机只是记住了菜谱而并没有去炒菜。

	最后，分享一些关键词，来帮助新手快速理解Haskell基本思想
	最最最基本的要算是递归
	进入正题，要看λ演算
	然后要理解λ演算等价于图灵机
	接着要知道柯里化
	如果愿意深入到哲学层面，可以试着理解哥德尔不完备定理
	我贴得都是中文WIKI，如果觉得不够详尽的话，请自行看英文版。

	Lisp是基于lambda演算设计的编程语言，比较抽象，门槛比较高，但处理问题上简洁优雅。
	C，java是基于图灵机模型设计的编程语言，比较形象生动，门槛比较低，但处理问题上繁琐复杂。
	但是，它们在计算能力上是等价的。

	工程（C++），理论（Haskell）和算法建模（ACM）
	这三件事做成两件应该就能出来见人了，做成三件就算优秀了。
